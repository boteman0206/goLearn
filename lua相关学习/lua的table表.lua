---
--- Generated by Luanalysis
--- Created by Administrator.
--- DateTime: 2021/12/29 21:43
---

--[[
    table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。
    Lua table 使用关联型数组，你可以用任意类型的值来作数组的索引，但这个值不能是 nil。
    Lua table 是不固定大小的，你可以根据自己需要进行扩容。
    Lua也是通过table来解决模块（module）、包（package）和对象（Object）的。 例如string.format表示使用"format"来索引table string。
   ]]


-- table的构造
mytable = {}
mytable[1]= "lua"
print(mytable)

-- 移除table   lua 垃圾回收会释放内存
mytable = nil


m1 = {}
m1[1] = "lua"
m1["wow"] = "修改前"
print(m1[1], m1['wow'])

m2 = m1
print(m2[1], m2['wow'])
-- 修改m2的值
m2['wow'] = "修改了m2"
print("修改m2之后：m1", m1[1], m1['wow'])
print("修改m2之后：m2", m2[1], m2['wow'])  -- todo 结论： m1和m2都会被修改

-- 释放m2
m2 = nil
print("m2被释放了： ", m2)
print("m1有么有被释放：", m1, m1[1], m1['wow'])  -- todo 结论：m1并没有被释放，还可以正常的取值



-- table常用操作
-- 连接 table.concat (table [, sep [, start [, end]]]):
m = {"hello", "world", "this", "is", 'beijing'}
data = table.concat(m,",",1,3)
print("拼接table：", data)

-- table.insert (table, [pos,] value):
table.insert(m, 2,"wow")
for i, v in pairs(m) do
    print("在索引2的位置插入：", i, v)
end

-- table.remove (table [, pos]) 删除所在位置的值
-- 返回table数组部分位于pos位置的元素. 其后的元素会被前移. pos参数可选, 默认为table长度, 即从最后一个元素删起相当于pop。
table.remove(m, 2)
for i, v in pairs(m) do
    print("remove之后的值：" ,i,v )
end

--table.sort (table [, comp])
local tb1 = {
    {id=1, num = 12},
    {id=13, num = 112},
    {id=3, num = 142},
    {id=5, num = 2},
}
for i, v in pairs(tb1) do
    print("排序前： ", i, v.id, v.num)
end
table.sort(tb1, function(a, b)
    return a.num > b.num
end)

for i, v in pairs(tb1) do
    print("按照num排序之后： ", i, v.id, v.num)
end

-- Table 最大值
-- table.maxn 在 Lua5.2 之后该方法已经不存在了，我们定义了 table_maxn 方法来实现
--以下实例演示了如何获取 table 中的最大值：

function table_maxn(t)
    local  maxk = 0
    for i, v in pairs(t) do
        print(i, v)
        if i>maxk then
            maxk = i
        end
    end
    return maxk
end

tbl = {[1] = 2, [2] = 6, [3] = 34, [26] =5}
print("tbl 最大值：", table_maxn(tbl))
print(#(tb1))
