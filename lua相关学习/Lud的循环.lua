---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pengwei.
--- DateTime: 2021/12/29 10:49
---

print("-----lua的循环--------")

-- while循环
--[[
    while true do
        print(" while  run ...")
    end
]]

a = 10
while (a < 20 ) do
    print("while 循环 。。。", a)
    a = a + 1
end
--
--while true do
----    print("while true return ..")
----    return "exit"  -- todo while中可以直接使用return, 但是在这里return的话会把后面所有的都结束掉
----end


--todo  return在循环, 判断中的使用也和函数中类似, 必须使用在循环结束, 或者判断的一个拐点结束前

-- for 循环
for i = 1, 10 , 1 do
    print('for 循环', i)
end

for i = 10, 1 , -1 do   -- 倒序执行
    print('for 循环', i)
end


for i = 1, 10 do  --  exp3 是可选的，如果不指定，默认为1。
    print('for 循环', i)
end


--使用fun来作为参数 for的三个表达式在循环开始前一次性求值，以后不再进行求值。
-- 比如上面的f(x)只会在循环开始前执行一次，其结果用在后面的循环中。
function f1(x)
    return x *2
end
print("===================")
for i = 1, f1(3) do
    print("使用fun函数作为参数：", i)
end


-- 泛型for循环  ipairs是Lua提供的一个迭代器函数，用来迭代数组。
a = {"one", "two", "three"}
for i, v in ipairs(a) do
    print("泛型for循环 :", i, v)
end

for i, v in pairs(a) do
    print(i, v)
end



--  repeat...until 循环
-- for 和 while 循环的条件语句在当前循环执行开始时判断，而 repeat...until 循环的条件语句在当前循环结束后判断。
a = 10

repeat
    print(" repeat循环： ", a)
    a = a+1
until (a > 15)


-- 嵌套循环
a = 1
while (a < 3 ) do
    for i = 1, 3 do
       print("嵌套的for循环： ", i)
    end
    a = a +1
end


-- break语句

for i = 1, 10 do
    if i == 5 then
        break
    end
    print("没有执行break ： ", i)
end




-- Lua 语言中的 goto 语句允许将控制流程无条件地转到被标记的语句处
-- 语法： goto Label   Label 的格式为： :: Label ::

-- todo 有了 goto，我们可以实现 continue 的功能：

for i=1, 3 do
    if i <= 2 then
        print(i, "yes continue")
        goto continue
    end
    print(i, " no continue")
    ::continue::
    print([[i'm end]])
end

