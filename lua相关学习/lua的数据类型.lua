---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pengwei.
--- DateTime: 2021/12/29 9:51
---


print("lua 数据结构")


-- lua

print("hello  lua")

print("string类型 ：", type("hello world"))
print("num类型： ", type(1), type(10.6*3))

-- 变量的类型 nil

print('没有设置的变量： ', x)

--  table 相当于是map
table1 = {key1 = 'val1', key2 = 'val2', 'val3', 'val4'}

for k, v in pairs(table1) do
    print(k .. "   " .. v)
    if k == 'key1' then
        print("this is key true", k)
    end
    if k == 1 then
        print("this is key true", k)
    end
end


-- nil比较，需要加上字符串才为true
-- nil 作比较时应该加上双引号 "：

print(type(p))

print('不加字符串：', type(p) == nil)
print('加上字符串的nil ', type(p) == 'nil')


-- Lua 把 false 和 nil 看作是 false，其他的都为 true，数字 0 也是 true:
if false or nil  then
    print("至少有一个是true")
else
    print("全部是false或者nil")
end


if 0 then
    print('0是代表的true')
else
    print('print else')
end

-- Lua 默认只有一种 number 类型 -- double（双精度）类型（默认类型可以修改 luaconf.h 里的定义），以下几种写法都被看作是 number 类型：

print(type(2))
print(type(2.2))
print(type(0.2))
print(type(2e+1))
print(type(0.2e-1))
print(type(7.8263692594256e-06))

-- string类型 字符串由一对双引号或单引号来表示 也可以用 2 个方括号 "[[]]" 来表示"一块"字符串。
string1 = 'this is string1'
string2 = "this is string2"

string3 = [[
	这是一个字符串的块，类似于golang里面的``号包含的字符块
]]

print(string1, string2, string3)

-- 在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字:
print('3' + 8)
print('3' + '2')

--[[
	如果字符串转换数字不成功就会报错

	print("sb" + 2)
	lua: test-01.lua:74: attempt to perform arithmetic on a string value
	stack traceback:
	]]

-- 计算字符串的长度
string1 = 'www.baidu.com'
print('计算字符串的长度： ', #string1)
string1 = '汉语字符长度'
print(#string1)



-- table(表)  最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表:

local tb1 = {}
local tb2 = {'apple', 'pear', 'orange', 'grape'}

-- Lua 中的表（table）其实是一个"关联数组"（associative arrays），数组的索引可以是数字或者是字符串。
tb1[1] = 'on1'
tb1[2] = 'two'
for k,v in pairs(tb1) do
    print(k , "   ", v)
end

-- todo 不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。
for k, v in pairs(tb2) do
    print(k, v)

end


-- function 函数 在 Lua 中，函数是被看作是"第一类值（First-Class Value）"，函数可以存在变量里:

function fib(n)
    if n <= 1 then
        return 1
    else
        return n * fib(n-1)
    end
end

print(fib(4))
fib2 = fib
print(fib2(1))

-- function 可以以匿名函数（anonymous function）的方式通过参数传递:
local tb2 = {'apple', 'pear', 'orange', 'grape'}
function testFun(tb2, fun)
    for k, v in pairs(tb2) do
        print(fun(k, v))
    end
end

testFun(tb2, function(key, val)
    return key .. " : " .. val
end
)




