

---
--- Generated by Luanalysis
--- Created by Administrator.
--- DateTime: 2021/12/29 21:23
---


--[[
    迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，
    每个迭代器对象代表容器中的确定的地址。在 Lua 中迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素。
]]

-- 泛型迭代器 for

a1 = {"google", "runoob"}
for i, v in ipairs(a1) do
    print(i, v)
end


--[[
在Lua中我们常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。Lua 的迭代器包含以下两种类型：
无状态的迭代器
多状态的迭代器
]]
-- 无状态的迭代器
function square(iteratorMaxCount, currentNumber)
    if currentNumber < iteratorMaxCount then
        currentNumber = currentNumber +1
        return currentNumber, currentNumber * currentNumber
    end
end

for i, v in square,3,0  do
    print("自己实现的得单函数：", i, v)
end

--[[
    todo 下面我们看看泛型 for 的执行过程：
    首先，初始化，计算 in 后面表达式的值，表达式应该返回泛型 for 需要的三个值：迭代函数、状态常量、控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略。
    第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for 结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。
    第三，将迭代函数返回的值赋给变量列表。
    第四，如果返回的第一个值为nil循环结束，否则执行循环体。
    第五，回到第二步再次调用迭代函数
]]


-- 无状态的迭代器

array = {"Google", "Runoob"}

function elementIterator (collection)
    local index = 0
    local count = #collection
    -- 闭包函数
    return function ()
        index = index + 1
        if index <= count
        then
            --  返回迭代器的当前元素
            return collection[index]
        end
    end
end

for element in elementIterator(array)
do
    print(element)
end