---
--- Generated by Luanalysis
--- Created by Administrator.
--- DateTime: 2021/12/30 21:29
---


--[[
    setmetatable(table,metatable): 对指定 table 设置元表(metatable)，如果元表(metatable)中存在 __metatable 键值，setmetatable 会失败。
    getmetatable(table): 返回对象的元表(metatable)。
]]

mytable = {a=1, b=2}
mymetable = {c=3, d=4}
print("mymetable: ", mytable, "mymetable: ",  mymetable)

t1 = getmetatable(mytable)
print("setmetatable之前： " ,t1)

data = setmetatable(mytable, mymetable)
print("data : ", data)
for i, v in pairs(data) do
    print(i, v)
end

t1 = getmetatable(mytable)
print("setmetatable之后： ",t1)



-- __index 元方法
--[[这是 metatable 最常用的键。--
--当你通过键来访问 table 的时候，如果这个键没有值，那么Lua就会寻找该table的metatable（假定有metatable）中的__index 键。如果__index包含一个表格，Lua会在表格中查找相应的键]]
other = {foo=3}
t1 = setmetatable({foo=90}, {__index = other})
t2 = setmetatable({}, {__index = other})
print("t1的值： ", t1.foo, " t2的值： ",t2.foo)  -- t1的值： 	90	 t2的值： 	3

print(t1.bar)
t1.bar = 45
for i, v in pairs(t1) do
    print("原表： ",i, v)
end
for i, v in pairs(other) do
    print("other : ",i, v)
end

for i, v in pairs(t2) do
    print("t2的值：", i, v)
end


--[[如果__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。
--
--todo __index 元方法查看表中元素是否存在，如果不存在，返回结果为 nil；如果存在则由 __index 返回结果。]]
mytable = setmetatable({key1 = "value1"}, {
    __index = function(mytable, key)
        if key == "key2" then
            return "metatablevalue"
        else
            return nil
        end
    end
})

print(mytable.key1,mytable.key2)
--[[
    总结
    Lua 查找一个表元素时的规则，其实就是如下 3 个步骤:
    1.在表中查找，如果找到，返回该元素，找不到则继续
    2.判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。
    3.判断元表有没有 __index 方法，如果 __index 方法为 nil，则返回 nil；如果 __index 方法是一个表，则重复 1、2、3；如果 __index 方法是一个函数，则返回该函数的返回值。
]]


--todo __newindex 元方法
--[[
    __newindex 元方法用来对表更新，__index则用来对表访问 。
    当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作。
    以下实例演示了 __newindex 元方法的应用：
]]
mymetable = {}
mytable = setmetatable({key1 = 'value1'}, {__newindex = mymetable})
print("__newindex: ", mytable.key1)
mytable.key2 = "新增值1"
print(mytable.key2, " == kye2 === ", mymetable.key2)  -- nil	 === 	新增值1

mytable.key1 = "新增值kye1"
print(mytable.key1, " == key1 = ", mymetable.key1)  -- nil	 === 	新增值1
--[[
    以上实例中表设置了元方法 __newindex，在对新索引键（newkey）赋值时（mytable.newkey = "新值2"），会调用元方法，而不进行赋值。而如果对已存在的索引键（key1），则会进行赋值，而不调用元方法 __newindex。
]]

tt = {
    __newindex = function(mytable, key, value)
        rawset(mytable, key, "\""..value.."\"")
    end
}

mytable = setmetatable({key1 = "value1"}, tt)

mytable.key1 = "new value"
mytable.key2 = 4

print(mytable.key1, mytable.key2, tt.key2)
tt.key2 = 4
print("tt add :" , mytable.key1, mytable.key2, tt.key2)


--为表添加操作符


