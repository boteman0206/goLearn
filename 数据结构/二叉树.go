package 数据结构

/**

博客网址： https://www.yijiyong.com/algorithm/basic/06-treebasic.html


可视化的二叉树网址：
http://btv.melezinek.cz/binary-search-tree.html
https://visualgo.net/en

二叉树的相关性质
二叉树的每个结点至多只有2棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。
二叉树的第i层至多有2^(i-1)个结点；深度为k的二叉树至多有2^k-1个结点。
满二叉树: 一棵深度为k，且有2^k-1个节点的二叉树称之为 满二叉树 ；
完全二叉树: 如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。

树和二叉树的区别
(1) 二叉树每个节点最多有2个子节点，树则无限制。
(2) 二叉树中节点的子树分为左子树和右子树，即使某节点只有一棵子树，也要指明该子树是左子树还是右子树，即二叉树是有序的。
(3) 树决不能为空，它至少有一个节点，而一棵二叉树可以是空的。



二叉树的遍历分为三种
1：先序遍历
2：中序遍历
4：后序遍历
个人理解： 这些遍历的叫法都是更具父节点的遍历实际来判断的
先序遍历是先遍历父节点然后在遍历子节点
中序遍历是先遍历左节点然后遍历父节点然后是有节点
后序遍历是先遍历左节点然后是右节点然后在遍历父节点


普通的二叉树是不平衡的,极端情况下是可能会退化成链表
这时候需要一个再平衡的过程，就是我们通常熟悉的平衡二叉树和红黑树 这些均可以使查找树的高度为O(log(n))。


平衡二叉树
平衡二叉树又称AVL树，它或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。

红黑树
红黑树是平衡二叉树的一种，它保证在最坏情况下基本动态集合操作的事件复杂度为O(log n)。红黑树和平衡二叉树区别如下：
(1) 红黑树放弃了追求完全平衡，追求大致平衡，在与平衡二叉树的时间复杂度相差不大的情况下，保证每次插入最多只需要三次旋转就能达到平衡，实现起来也更为简单。
(2) 平衡二叉树追求绝对平衡，条件比较苛刻，实现起来比较麻烦，每次插入新节点之后需要旋转的次数不能预知。


红黑树的特性:
（1）每个节点或者是黑色，或者是红色。
（2）根节点是黑色。
（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
（4）如果一个节点是红色的，则它的子节点必须是黑色的。
（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。



B树  可视化网址：https://www.cs.usfca.edu/~galles/visualization/BTree.html
注意:之前有看到有很多文章把B树和B-tree理解成了两种不同类别的树，其实这两个是同一种树;
#概念
B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个），
数据库索引技术里大量使用者B树和B+树的数据结构，让我们来看看他有什么特点;



*/
