package 数据结构

/**

博客网址： https://www.yijiyong.com/algorithm/basic/06-treebasic.html


可视化的二叉树网址：
http://btv.melezinek.cz/binary-search-tree.html
https://visualgo.net/en

二叉树的相关性质
二叉树的每个结点至多只有2棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。
二叉树的第i层至多有2^(i-1)个结点；深度为k的二叉树至多有2^k-1个结点。
满二叉树: 一棵深度为k，且有2^k-1个节点的二叉树称之为 满二叉树 ；
完全二叉树: 如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。

树和二叉树的区别
(1) 二叉树每个节点最多有2个子节点，树则无限制。
(2) 二叉树中节点的子树分为左子树和右子树，即使某节点只有一棵子树，也要指明该子树是左子树还是右子树，即二叉树是有序的。
(3) 树决不能为空，它至少有一个节点，而一棵二叉树可以是空的。



二叉树的遍历分为三种
1：先序遍历
2：中序遍历
4：后序遍历
个人理解： 这些遍历的叫法都是更具父节点的遍历实际来判断的
先序遍历是先遍历父节点然后在遍历子节点
中序遍历是先遍历左节点然后遍历父节点然后是有节点
后序遍历是先遍历左节点然后是右节点然后在遍历父节点


普通的二叉树是不平衡的,极端情况下是可能会退化成链表
这时候需要一个再平衡的过程，就是我们通常熟悉的平衡二叉树和红黑树 这些均可以使查找树的高度为O(log(n))。


平衡二叉树
平衡二叉树又称AVL树，它或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。

*/
