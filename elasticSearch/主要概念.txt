
参考文档： https://www.elastic.org.cn/archives/chapter4


1: 索引
    相当于mysql的表
    1.1: 索引的组成部分
        alias：即 索引别名，后续有单独讲解，基础篇不赘述，戳：ES中索引别名（alias）的到底有什么用
        settings：索引设置，常见设置如分片和副本的数量等。
        mapping：即映射，定义了索引中包含哪些字段，以及字段的类型、长度、分词器等。

    索引在不同的环境代表的意义：
        表示源文件数据：当做数据的载体，即类比为数据表，通常称作 index 。例如：通常说 集群中有 product 索引，即表述当前 ES 的服务中存储了 product 这样一张“表”。
        表示索引文件：以加速查询检索为目的而设计和创建的数据文件，通常承载于某些特定的数据结构，如哈希、FST 等。例如：通常所说的 正排索引 和 倒排索引（也叫正向索引和反向索引）。就是当前这个表述，索引文件和源数据是完全独立的，索引文件存在的目的仅仅是为了加快数据的检索，不会对源数据造成任何影响，
        表示创建数据的动作：通常说创建或添加一条数据，在 ES 的表述为索引一条数据或索引一条文档，或者 index 一个 doc 进去。此时索引一条文档的含义为向索引中添加数据。
    # 查询所有的索引
    GET _cat/indices?v
    # 获取指定索引信息
    GET /product_test01



2: 类型
   Type（ES 7.x 之后版本已删除此概念）
        最初，“索引”类似于 SQL 数据库中的“数据库”，“类型”相当于“表”。即
        元字段	    ES 6.x 及早期版本	    ES 7.x 及之后版本
        _index	    DataBase	        Table
        _type	    Table	            固定为：“_doc”
        _doc	    Row	                Row
   废弃原因：
        逻辑不合理：这是错误的类比，官方后来也意识到了这是个错误。在 SQL 数据库中，表是相互独立的。一个表中的列与另一个表中的同名列无关。对于映射类型中的字段，情况并非如此。
        数据结构混乱：在 Elasticsearch 索引中，不同映射类型中具有相同名称的字段在内部由相同的 Lucene 字段支持。换句话说，使用上面的示例，类型中的 user_name 字段与 user 和 order 类型中的字段存储在完全相同的 user_name 字段中 ，并且两个 user_name 字段在两种类型中必须具有相同的映射（定义）。
        影响性能：最重要的是，在同一索引中存储具有很少或没有共同字段的不同实体会导致数据稀疏并干扰 Lucene 有效压缩文档的能力。



3:文档：Document
    ## 3.1 元数据：mata data
    所有的元字段均已下划线开头，为系统字段。
        _index：索引名称
        _id：文档 id。
        _version：版本号
        _seq_no：索引级别的版本号，索引中所有文档共享一个 _seq_no
        _primary_term：_primary_term是一个整数，每当Primary Shard发生重新分配时，比如节点重启，Primary选举或重新分配等，_primary_term会递增1。主要作用是用来恢复数据时处理当多个文档的_seq_no 一样时的冲突，避免 Primary Shard 上的数据写入被覆盖。
    3.2 源数据：source data
        指业务数据，即最终写入的用户数据。


4： 分片：Shard
    ES支持PB级全文搜索，当索引上的数据量太大的时候，ES通过水平拆分的方式将一个索引上的数据拆分出来分配到不同的数据块上，拆分出来的数据库块称之为一个分片。
    4.1：分片的种类
        主分片（primary shard）:
        副本分片（replica shard）:
    4.2: 分片的基本策略
        一个索引包含一个或多个分片，在7.0之前默认五个主分片，每个主分片一个副本；在7.0之后默认一个主分片。副本可以在索引创建之后修改数量，但是主分片的数量一旦确定不可修改，只能创建索引
        每个分片都是一个Lucene实例，有完整的创建索引和处理请求的能力
        ES会自动再nodes上做分片均衡 shard reblance
        一个doc不可能同时存在于多个主分片中，但是当每个主分片的副本数量不为一时，可以同时存在于多个副本中。
        主分片和其副本分片不能同时存在于同一个节点上。
        完全相同的副本不能同时存在于同一个节点上。

    4.3: 分片的作用和意义
         高可用性：提高分布式服务的高可用性。
         提高性能：提供系统服务的吞吐量和并发响应的能力
         易扩展：当集群的性能不满足业务要求时，可以方便快速的扩容集群，而无需停止服务。

5： 副本（Replicas）
    副本就是对分片的Copy，每个主分片都有一个或多个副本分片，当主分片异常时，副本可以提供数据的查询等操作。主分片和对应的副本分片是不会在同一个节点上的，所以副本分片数的最大值是 n -1（其中n为节点数）。

6： 映射（Mapping）
    映射是用于定义ES对索引中字段的存储类型、分词方式和是否存储等信息，就像数据库中的 schema ，描述了文档可能具有的字段或属性、每个字段的数据类型。
    只不过关系型数据库建表时必须指定字段类型，而ES对于字段类型可以不指定然后动态对字段类型猜测，也可以在创建索引时具体指定字段的类型。
    6.1: 动态映射（Dynamic mapping）
        对字段类型根据数据格式自动识别的映射
    6.2: 静态映射
        我们创建索引时具体定义字段类型的映射称之为静态映射或显示映射（Explicit mapping）。

7： 倒排索引：见表 倒排索引.png图片
   词条(Term)：索引里面最小的存储和查询单元，对于英文来说是一个单词，对于中文来说一般指分词后的一个词。
   词典(Term Dictionary)：或字典，是词条Term的集合。搜索引擎的通常索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。
   倒排表(Post list)：一个文档通常由多个词组成，倒排表记录的是某个词在哪些文档里出现过以及出现的位置。每条记录称为一个倒排项(Posting)。倒排表记录的不单是文档编号，还存储了词频等信息。
   倒排文件(Inverted File)：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件被称之为倒排文件，倒排文件是存储倒排索引的物理文件。

   从上图我们可以了解到倒排索引主要由两个部分组成：
        词典和倒排文件。词典和倒排表是Lucene中很重要的两种数据结构，是实现快速检索的重要基石。词典和倒排文件是分两部分存储的，词典在内存中而倒排文件存储在磁盘上

        // chatgpt的解释
        在Elasticsearch中，倒排索引是一种将词项与包含它们的文档进行映射的数据结构。倒排索引的核心是词典（Lexicon）和倒排文件（Inverted File）。
        词典是一个保存在内存中的数据结构，它存储了所有出现过的词项以及与之相关的元数据，如词项的词频、位置信息等。词典充当了一个词项到倒排文件的映射索引，通过词典可以快速定位到倒排文件中存储该词项的位置。
        倒排文件是实际存储在磁盘上的文件，它存储了每个词项所对应的倒排列表。倒排列表包含了包含该词项的文档ID以及一些统计信息，如词项在文档中的位置、词频等。倒排文件根据词项进行排序，以支持快速的词项查找和检索。
        因此，词典作为内存中的数据结构，提供了词项到倒排文件的映射，而倒排文件存储了实际的倒排列表，包含了词项与文档之间的关联信息。这种将词典存储在内存中，而倒排文件存储在磁盘上的方式，既保证了快速的词项查找，又兼顾了存储效率。

8： 分段存储
    索引文档以段的形式存储在磁盘上，何为段？索引文件被拆分为多个子文件，则每个子文件叫作段， 每一个段本身都是一个倒排索引，并且段具有不变性，一旦索引的数据被写入硬盘，就不可再修改。
    在底层采用了分段的存储模式，使它在读写时几乎完全避免了锁的出现，大大提升了读写性能。

    段被写入到磁盘后会生成一个提交点，提交点是一个用来记录所有提交后段信息的文件。一个段一旦拥有了提交点，就说明这个段只有读的权限，失去了写的权限。相反，当段在内存中时，就只有写的权限，而不具备读数据的权限，意味着不能被检索。

9：延迟写策略
    为了提升写的性能，ES并没有每新增一条数据就增加一个段到磁盘上，而是采用延迟写的策略。
    每当有新增的数据时，就将其先写入到内存中，在内存和磁盘之间是文件系统缓存，当达到默认的时间（1秒钟）或者内存的数据达到一定量时，会触发一次刷新（Refresh），
    将内存中的数据生成到一个新的段上并缓存到文件缓存系统 上，稍后再被刷新到磁盘中并生成提交点。

10：段合并
    由于自动刷新流程每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。 每一个段都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段然后合并查询结果，所以段越多，搜索也就越慢。

    Elasticsearch通过在后台定期进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档不会被拷贝到新的大段中。合并的过程中不会中断索引和搜索。

    段合并在进行索引和搜索时会自动进行，合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中，这些段既可以是未提交的也可以是已提交的。合并结束后老的段会被删除，新的段被 flush 到磁盘，同时写入一个包含新段（已排除旧的被合并的段）的新提交点，新的段被打开可以用来搜索。



11： 健康状态
    绿色：所有分片都可用
    黄色：至少有一个副本不可用，但是所有主分片都可用，此时集群能提供完整的读写服务，但是可用性较低。
    红色：至少有一个主分片不可用，数据不完整。此时集群无法提供完整的读写服务。集群不可用。

    GET _cat/health
    GET _cluster/health

12： 常用api
    Cat APIs：
        _cat/indices?health=yellow&v=true：查看当前集群中的所有索引
        _cat/health?v=true：查看健康状态
        _cat/nodeattrs：查看节点属性
        _cat/nodes?v：查看集群中的节点
        _cat/shards：查看集群中所有分片的分配情况

    Cluster APIs
        _cluster/allocation/explain：可用于诊断分片未分配原因
            分片未分配的原因
                ALLOCATION_FAILED: 由于分片分配失败而未分配
                CLUSTER_RECOVERED: 由于完整群集恢复而未分配.
                DANGLING_INDEX_IMPORTED: 由于导入悬空索引而未分配.
                EXISTING_INDEX_RESTORED: 由于还原到闭合索引而未分配.
                INDEX_CREATED: 由于API创建索引而未分配.
                INDEX_REOPENED: 由于打开闭合索引而未分配.
                NEW_INDEX_RESTORED: 由于还原到新索引而未分配.
                NODE_LEFT: 由于承载它的节点离开集群而取消分配.
                REALLOCATED_REPLICA: 确定更好的副本位置并取消现有副本分配.
                REINITIALIZED: 当碎片从“开始”移回“初始化”时.
                REPLICA_ADDED: 由于显式添加了复制副本而未分配.
                REROUTE_CANCELLED: 由于显式取消重新路由命令而取消分配.
        _cluster/health/ ：检查集群状态

