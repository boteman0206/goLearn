package 分布式理论

/**
https://javaguide.cn/distributed-system/theorem&algorithm&protocol/cap&base-theorem.html#%E4%B8%8D%E6%98%AF%E6%89%80%E8%B0%93%E7%9A%84-3-%E9%80%89-2


一： CAP原理介绍
C：Consistency
	即一致性，访问所有的节点得到的数据应该是一样的。注意，这里的一致性指的是强一致性，也就是数据更新完，访问任何节点看到的数据完全一致，要和弱一致性，最终一致性区分开来。
A：Availability
	即可用性，所有的节点都保持高可用性。注意，这里的高可用还包括不能出现延迟，比如如果节点B由于等待数据同步而阻塞请求，那么节点B就不满足高可用性。
	也就是说，任何没有发生故障的服务必须在有限的时间内返回合理的结果集
P：Partiton tolerence
	即分区容忍性，这里的分区是指网络意义上的分区。由于网络是不可靠的，所有节点之间很可能出现无法通讯的情况，在节点不能通信时，要保证系统可以继续正常服务。

二： 分区容错性和可用性的区别
分区容错性：
	因为网络等硬件引起的问题，一台服务器崩溃了，保证能在其他服务器上也能顺利完成业务。
可用性：
	因为软件代码层面的问题，一台服务器上的服务崩溃了，保证能在其他服务器上完成该业务。
区别：
	分区容错性更偏向于硬件引起的问题
	可用性更偏向于软件代码层面的问题


三： 什么是网络分区？
	分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。
	当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1，也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。
	因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper、HBase 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。

	另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。

	总结：如果系统发生“分区”，我们要考虑选择 CP 还是 AP。如果系统没有发生“分区”的话，我们要思考如何保证 CA 。

四：CAP 实际应用案例
	常见的可以作为注册中心的组件有：ZooKeeper、Eureka、Nacos...。
		1：ZooKeeper 保证的是 CP。 任何时刻对 ZooKeeper 的读请求都能得到一致性的结果，但是， ZooKeeper 不保证每次请求的可用性比如在 Leader 选举过程中或者半数以上的机器不可用的时候服务就是不可用的。
		2：Eureka 保证的则是 AP。 Eureka 在设计的时候就是优先保证 A （可用性）。在 Eureka 中不存在什么 Leader 节点，每个节点都是一样的、平等的。因此 Eureka 不会像 ZooKeeper 那样出现选举过程中或者半数以上的机器不可用的时候服务就是不可用的情况。 Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了。只不过这个节点上的数据可能并不是最新的。
		3: Nacos 不仅支持 CP 也支持 AP。# 总结


五： BASE 理论  三个短语的缩写
	1： Basically Available（基本可用）
		基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用。
	2： Soft-state（软状态）
		软状态指允许系统中的数据存在中间状态（CAP 理论中的数据不一致），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。
	3： Eventually Consistent（最终一致性）
		最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。
	#BASE 理论的核心思想
		即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性
		也就是牺牲数据的一致性来满足系统的高可用性，系统中一部分数据不可用或者不一致时，仍需要保持系统整体“主要可用”。

六： 分布式一致性的 3 种级别：
	1：强一致性 ：系统写入了什么，读出来的就是什么。
	2：弱一致性 ：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。、
	3：最终一致性 ：弱一致性的升级版，系统会保证在一定时间内达到数据一致的状态。

	业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。



总结： ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸。

*/
