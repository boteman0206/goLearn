

dockerfile的详解
Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。



================================ FROM 指定基础镜像===============

FROM nginx
RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html



================================RUN 执行命令=======================

RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。
其格式有两种：
    方式一： shell 格式：RUN <命令>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。
    RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
    方式二： exec 格式：RUN ["可执行文件", "参数1", "参数2"]，这更像是函数调用中的格式

注意点： 之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更
错误实例：
    RUN cd /app
    RUN echo "hello" > world.txt
    如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dockerfile 构建分层存储的概念不了解所导致的错误。
    因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令
正确的做法:
    WORKDIR /app
    RUN echo "hello" > world.txt


=================COPY 复制文件======================
COPY 指令将从构建上下文目录中 <源路径> 的文件/目录复制到新的一层的镜像内的 <目标路径> 位置。比如：
    方式一： COPY [--chown=<user>:<group>] <源路径>... <目标路径>
    方式二（命令行格式）： COPY [--chown=<user>:<group>] ["<源路径1>",... "<目标路径>"]

<源路径> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：
    COPY hom* /mydir/
    COPY hom?.txt /mydir/
<目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。

如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。




=====================ADD 更高级的复制文件（）=====================================
注意： 在 Docker 官方的 Dockerfile 最佳实践文档 中要求，尽可能的使用 COPY
ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。
如果 <源路径> 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 <目标路径> 去。
FROM scratch
ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /
...
但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 ADD 命令了。



========================CMD 容器启动命令========================================
CMD 指令的格式和 RUN 相似，也是两种格式：
    shell 格式：CMD <命令>
    exec 格式：CMD ["可执行文件", "参数1", "参数2"...]
    参数列表格式：CMD ["参数1", "参数2"...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。
在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "，而不要使用单引号。


注意点： （https://yeasy.gitbook.io/docker_practice/image/dockerfile/cmd）
    Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 systemd 去启动后台服务，容器内没有后台服务的概念。
    错误的使用：CMD service nginx start  然后发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。
    正确的做法是直接执行 nginx 可执行文件  CMD ["nginx", "-g", "daemon off;"]



==========================ENTRYPOINT 入口点=====================================================
https://yeasy.gitbook.io/docker_practice/image/dockerfile/entrypoint
ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式

ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。
当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：





==============================ENV 设置环境变量====================================================

格式有两种：
    ENV <key> <value>
    ENV <key1>=<value1> <key2>=<value2>...
这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。



================================ARG 构建参数==================================================================

格式：ARG <参数名>[=<默认值>]
构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。


================================VOLUME 定义匿名卷================================================================
格式为：
    VOLUME ["<路径1>", "<路径2>"...]
    VOLUME <路径>
默认的windows10的文件挂在路径： \\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes


================================EXPOSE 暴露端口=========================================================
格式为 EXPOSE <端口1> [<端口2>...]

EXPOSE 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。

要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。


==============================WORKDIR 指定工作目录=================================================
格式为 WORKDIR <工作目录路径>
使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。


如果你的 WORKDIR 指令使用的相对路径，那么所切换的路径与之前的 WORKDIR 有关：
    WORKDIR /a
    WORKDIR b
    WORKDIR c
    RUN pwd

    RUN pwd 的工作目录为 /a/b/c。



=============================USER 指定当前用户=============================
格式：USER <用户名>[:<用户组>]
USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。



====================================HEALTHCHECK 健康检查==================================

格式：
    HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
    HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令



=======================================ONBUILD 为他人作嫁衣裳=================================
格式：ONBUILD <其它指令>。
ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。
Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的。



===============================LABEL 为镜像添加元数据==================================
LABEL 指令用来给镜像以键值对的形式添加一些元数据（metadata）。

LABEL <key>=<value> <key>=<value> <key>=<value> ...
我们还可以用一些标签来申明镜像的作者、文档地址等
LABEL org.opencontainers.image.authors="yeasy"
LABEL org.opencontainers.image.documentation="https://yeasy.gitbooks.io"



==============================SHELL 指令=========================================
格式：SHELL ["executable", "parameters"]
SHELL 指令可以指定 RUN ENTRYPOINT CMD 指令的 shell，Linux 中默认为 ["/bin/sh", "-c"]

















==============docker build的注意点：（相关文章）============================
一般来说，应该会将 Dockerfile 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。
那么为什么会有人误以为 . 是指定 Dockerfile 所在目录呢？这是因为在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。
这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。

方式一： 从url构建
    $ docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world
方式二： 从tar包构建
    $ docker build http://server/context.tar.gz
方式三： 从标准输入中读取 Dockerfile 进行构建
    docker build - < Dockerfile  或者 cat Dockerfile | docker build -
方式三： 从标准输入中读取上下文压缩包进行构建
    $ docker build - < context.tar.gz





构建实力:

    实例一：（还没整明白）
    # 构建dockerfile文件

    FROM golang:alpine


    # 设置环境变量必须的不然可能会报错
    ENV  GO111MODULE on
    ENV GOPROXY "https://goproxy.cn,direct"


    WORKDIR $GOPATH/src/github.com/EDDYCJY/go-gin-example
    COPY .  $GOPATH/src/github.com/EDDYCJY/go-gin-example

    RUN go build .   // 这里会进行编译 生成的文件名称为 module awesomeProject 名称切记不要搞错

    EXPOSE 8000

    # 相当于直接执行生成的.exe文件
    ENTRYPOINT ["./awesomeProject"]   // 注意这个入口的路径是go的项目模块名 module awesomeProject  //注意这里ENTRYPOINT换成cmd并不会执行


    实例二：（直接在容器内执行）
    FROM golang:1.14
    WORKDIR /go/src/app
    ADD . /go/src/app
    RUN go env -w GO111MODULE=on
    RUN go env -w GOPROXY=https://goproxy.cn,direct
    RUN go get -u github.com/labstack/echo
    EXPOSE 9001
    CMD go run main.go


    实例三：
    # test file

    FROM golang:latest

    # 设置环境变量必须的不然可能会报错
    ENV  GO111MODULE  on
    ENV GOPROXY  https://goproxy.cn,direct

    WORKDIR /go/src/app
    COPY . .


    RUN go mod tidy
    RUN go mod download

    RUN go build .

    EXPOSE 8000

    ENTRYPOINT ["./awesomeProject"]

总结，其实测试的时候可以直接使用-v挂载的技术，然后在本地生成.exe文件然后在docker内部执行即可。