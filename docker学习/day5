

dockerfile的详解
Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。



FROM 指定基础镜像

FROM nginx
RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html



RUN 执行命令

RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。
其格式有两种：
    方式一： shell 格式：RUN <命令>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。
    RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
    方式二： exec 格式：RUN ["可执行文件", "参数1", "参数2"]，这更像是函数调用中的格式






docker build的注意点：（相关文章）
一般来说，应该会将 Dockerfile 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。
那么为什么会有人误以为 . 是指定 Dockerfile 所在目录呢？这是因为在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。
这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。

方式一： 从url构建
    $ docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world
方式二： 从tar包构建
    $ docker build http://server/context.tar.gz
方式三： 从标准输入中读取 Dockerfile 进行构建
    docker build - < Dockerfile  或者 cat Dockerfile | docker build -
方式三： 从标准输入中读取上下文压缩包进行构建
    $ docker build - < context.tar.gz


