package main

/**
1: 什么是内存泄露?
内存泄露指的是程序运行过程中已不再使用的内存，没有被释放掉，导致这些内存无法被使用，直到程序结束这些内存才被释放的问题。
Go虽然有GC来回收不再使用的堆内存，减轻了开发人员对内存的管理负担，但这并不意味着Go程序不再有内存泄露问题。
在Go程序中，如果没有Go语言的编程思维，也不遵守良好的编程实践，就可能埋下隐患，造成内存泄露问题。

2:怎么发现内存泄露?
在Go中发现内存泄露有2种方法，一个是通用的监控工具，另一个是go pprof：
监控工具：固定周期对进程的内存占用情况进行采样，数据可视化后，根据内存占用走势（持续上升），很容易发现是否发生内存泄露。
go pprof：适合没有监控工具的情况，使用Go提供的pprof工具判断是否发生内存泄露。

3: 什么是goroutine泄露
如果你启动了1个goroutine，但并没有符合预期的退出，直到程序结束，此goroutine才退出，这种情况就是goroutine泄露。
4: goroutine泄露有2种方式造成内存泄露：
	4.1: goroutine本身的栈所占用的空间造成内存泄露。
	4.2:goroutine中的变量所占用的堆内存导致堆内存泄露，这一部分是能通过heap profile体现出来的。


*/
